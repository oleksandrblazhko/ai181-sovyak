# V8.1 General Data Protection

|   №   | Опис                                                                                                                                                                                                                                                                     | L1  | L2  | L3  | CWE | 
|:-----:|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:---:|:---:|:---:|:---:|
| 8.1.1 | Переконайтеся, що програма забезпечує виконання правил контролю доступу на рівні довіреної служби, особливо якщо доступ на стороні клієнта присутній і його можна обійти.                                                                                                |  ✓  |  ✓  |  ✓  | 602 |
| 8.1.2 | Переконайтеся, що всі атрибути користувача та даних, а також інформація про політику, яка використовується засобами керування доступом, не можуть маніпулювати кінцевими користувачами без спеціального дозволу.                                                         |  ✓  |  ✓  |  ✓  | 639 | 
| 8.1.3 | Переконайтеся, що існує принцип найменших привілеїв – користувачі повинні мати доступ лише до функцій, файлів даних, URL-адрес, контролерів, служб та інших ресурсів, для яких вони мають певний дозвіл. Це передбачає захист від підробки та підвищення привілеїв. (C7) |  ✓  |  ✓  |  ✓  | 285 |                                                                                                                                                                                                                                           |     |     |     |     |
| 8.1.4 | Переконайтеся, що засоби керування доступом безпечно спрацьовують, у тому числі в разі виникнення винятку. (C10)                                                                                                                                                         |  ✓  |  ✓  |  ✓  | 285 |

---


# C:

## C7: Забезпечення контролю доступу

### Опис

Контроль доступу (або авторизація) — це процес надання або відхилення конкретних запитів від користувача, програми або
процесу. Контроль доступу також включає дію надання та скасування цих привілеїв.

Слід зазначити, що авторизація (перевірка доступу до певних функцій або ресурсів) не є еквівалентом автентифікації (
підтвердження особи).

Функціональність контролю доступу часто охоплює багато областей програмного забезпечення залежно від складності системи
контролю доступу. Наприклад, керування метаданими контролю доступу або створення кешування для цілей масштабованості
часто є додатковими компонентами в системі контролю доступу, якими потрібно будувати або керувати. Існує кілька різних
типів проектування контролю доступу, які слід розглянути.

- Дискреційний контроль доступу (DAC) — це засіб обмеження доступу до об’єктів (наприклад, файлів, об’єктів даних) на
  основі ідентичності та необхідності знати суб’єктів (наприклад, користувачів, процесів) та/або груп, до яких належить
  об’єкт.
- Обов’язковий контроль доступу (MAC) — це засіб обмеження доступу до системних ресурсів на основі конфіденційності (як
  представлено міткою) інформації, що міститься в системному ресурсі, і формального авторизації (тобто дозволу)
  користувачів на доступ до такої інформації. чутливість.
- Управління доступом на основі ролей (RBAC) — це модель керування доступом до ресурсів, у якій дозволені дії над
  ресурсами визначаються ролями, а не індивідуальними ідентифікаторами суб’єктів.
- Керування доступом на основі атрибутів (ABAC) надаватиме або відхилятиме запити користувачів на основі довільних
  атрибутів користувача та довільних атрибутів об’єкта, а також умов середовища, які можуть бути загальновизнаними та
  більш відповідними відповідним політикам.

### Принципи проектування контролю доступу

Наступні «позитивні» вимоги до дизайну контролю доступу слід враховувати на початкових етапах розробки програми.

1) #### Ретельно спроектуйте контроль доступу спереду
   Після того, як ви вибрали певний шаблон дизайну керування доступом, часто буває складно та забирає багато часу
   переробити контроль доступу у вашій програмі за допомогою нового шаблону. Контроль доступу — це одна з головних
   областей розробки безпеки додатків, яка має бути ретельно розроблена на початку, особливо під час вирішення таких
   вимог, як багатокористувацький і горизонтальний (залежний від даних) контроль доступу. <br><br>Дизайн контролю
   доступу може
   спочатку бути простим, але часто може перетворитися на складний і багатофункціональний контроль безпеки. Оцінюючи
   можливості керування доступом програмних інфраструктур, переконайтеся, що ваша функціональність контролю доступу
   дозволяє настроїти її відповідно до ваших потреб.

2) #### Змусити всі запити проходити через контроль доступу
   Переконайтеся, що всі запити проходять через якийсь рівень перевірки контролю доступу. Такі технології, як
   Java-фільтри чи інші автоматичні механізми обробки запитів, є ідеальними програмними артефактами, які допоможуть
   гарантувати, що всі запити проходять певну перевірку контролю доступу.

3) #### Відмовити за замовчуванням
   Відмовити за замовчуванням — це принцип, згідно з яким якщо запит спеціально не дозволено, він відхиляється. Є багато
   способів, як це правило буде проявлятися в коді програми. Ось деякі з них:<br><br>
    1. Код програми може викликати помилку або виняток під час обробки запитів на контроль доступу. У цих випадках
       контроль
       доступу завжди має бути заборонений.
    2. Коли адміністратор створює нового користувача або користувач реєструє новий обліковий запис, цей обліковий запис
       має
       мати мінімальний або взагалі не мати доступу за замовчуванням, доки цей доступ не буде налаштовано.
    3. Коли до програми додається нова функція, усім користувачам має бути заборонено використовувати цю функцію, доки
       її не
       буде правильно налаштовано.

4) #### Принцип найменших привілеїв
   Переконайтеся, що всім користувачам, програмам або процесам надано якомога менший або мінімальний необхідний доступ.
   Будьте обережні з системами, які не надають можливості конфігурації детального контролю доступу.

5) #### Не жорстко кодуйте ролі
   Багато фреймворків програм за замовчуванням керують доступом на основі ролей. Зазвичай можна знайти код програми,
   який заповнений перевірками такого характеру.
    ```
    if (user.hasRole("ADMIN")) || (user.hasRole("MANAGER")) {
            deleteAccount();
        }
    ```
   Будьте обережні з цим типом рольового програмування в коді. Він має такі обмеження або небезпеки.

    - Таке рольове програмування є крихким. У коді легко створити неправильні або відсутні перевірки ролі.
    - Рольове програмування не допускає використання кількох орендарів. Будуть потрібні екстремальні заходи, такі як
      розгалуження коду або додавання перевірок для кожного клієнта, щоб дозволити рольовим системам мати різні правила
      для
      різних клієнтів.
    - Програмування на основі ролей не допускає специфічних для даних або горизонтальних правил контролю доступу.
    - Великі кодові бази з багатьма перевірками контролю доступу можуть бути складними для аудиту або перевірки
      загальної
      політики контролю доступу програми.
      Натомість розгляньте таку методологію програмування контролю доступу:
    ```
    if (user.hasAccess("DELETE_ACCOUNT")) {
         видалити аккаунт();
     }
    ```
   Такого роду перевірки контролю доступу на основі атрибутів або функцій є відправною точкою для побудови добре
   розроблених і багатофункціональних систем контролю доступу. Цей тип програмування також дозволяє розширити можливості
   налаштування контролю доступу з часом.
6) #### Реєструйте всі події контролю доступу
   Усі помилки контролю доступу слід реєструвати, оскільки вони можуть свідчити про те, що зловмисник перевіряє програму
   на наявність вразливостей.

## C10: Обробка всіх помилок і винятків

### Опис

Обробка особливих ситуацій — це концепція програмування, яка дозволяє програмі різними способами реагувати на різні
стани помилок (наприклад, несправність мережі, збій підключення до бази даних тощо). Правильна обробка винятків і
помилок має вирішальне значення для надійності та безпеки вашого коду.

Обробка помилок і винятків відбувається в усіх областях програми, включаючи критично важливу бізнес-логіку, а також
функції безпеки та код інфраструктури.

Обробка помилок також важлива з точки зору виявлення вторгнень. Певні атаки на вашу програму можуть викликати помилки,
які можуть допомогти виявити поточні атаки.

### Помилки обробки помилок

Дослідники з Університету Торонто виявили, що навіть невеликі помилки в обробці помилок або забуття обробки помилок
можуть призвести до катастрофічних збоїв у розподілених системах.

Помилки в обробці помилок можуть призвести до різних типів вразливостей безпеки.

- **Витік інформації:** Витік конфіденційної інформації в повідомленнях про помилки може ненавмисно допомогти
  зловмисникам. Наприклад, помилка, яка повертає трасування стека або інші деталі внутрішньої помилки, може надати
  зловмиснику інформацію про ваше середовище. Навіть невеликі відмінності в обробці різних умов помилки (наприклад,
  повернення «недійсний користувач» або «недійсний пароль» у разі помилок автентифікації) можуть надати цінні підказки
  для зловмисників. Як описано вище, не забудьте зареєструвати деталі помилок для криміналістики та налагодження, але не
  надавайте цю інформацію, особливо зовнішньому клієнту.
- **Обхід TLS:** «Помилка переміщення Apple» була помилкою потоку керування в коді обробки помилок, яка призвела до
  повного порушення з’єднань TLS у системах Apple.
- **DOS:** Відсутність базової обробки помилок може призвести до вимкнення системи. Зазвичай це досить легка вразливість
  для зловмисників. Інші проблеми обробки помилок можуть призвести до збільшення використання ЦП або диска таким чином,
  що може погіршити роботу системи.

### Позитивні поради

- Централізовано керуйте винятками, щоб уникнути дублювання блоків try/catch у коді. Переконайтеся, що вся несподівана
  поведінка правильно обробляється всередині програми.
- Переконайтеся, що повідомлення про помилки, які відображаються користувачам, не призводять до витоку критичних даних,
  але все ще є достатньо докладними, щоб забезпечити належну відповідь користувача.
- Переконайтеся, що винятки реєструються таким чином, щоб отримати достатньо інформації для підтримки, контролю якості,
  криміналістики або груп реагування на інциденти, щоб зрозуміти проблему.
- Уважно протестуйте та перевірте код обробки помилок.

---

# CWE:

## CWE-602: Застосування безпеки cторони сервера на стороні клієнта

### Опис

Продукт складається з сервера, який покладається на клієнта для реалізації механізму, призначеного для захисту сервера.

### Розширений опис

Коли сервер покладається на механізми захисту, розміщені на стороні клієнта, зловмисник може змінити поведінку на
стороні клієнта, щоб обійти механізми захисту, що призводить до потенційно неочікуваної взаємодії між клієнтом і
сервером. Наслідки будуть різними залежно від того, які механізми намагаються захистити.

### Застосовні платформи

#### Мови

Клас: не залежить від мови (поширеність не визначена)

#### Технології

Клас: мобільний (поширеність не визначена)

### Загальні наслідки

| Область застосування       | Вплив                                                                                                                                                                                                                                                                                                                                        | Ймовірність |
|----------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------|
| Наявність контролю доступу | **Технічний вплив:** _Обхід захисного механізму; DoS: збій, вихід або перезапуск_ <br><br> Перевірки на стороні клієнта можна легко обійти, дозволяючи неправильно сформованому або неочікувані введення передані в програму, прийнявши за потенційно як надійні дані. Це може призвести до неочікуваних станів, поведінки та, можливо, до збою. |             |
| Управління доступом        | **Технічний вплив:** _Обхід захисного механізму; Отримання привілеїв або присвоєння собі ідентифікації_ <br><br> Перевірки автентифікації на стороні клієнта можна легко обійти, дозволяючи клієнтам підвищувати свої рівні доступу та виконувати ненавмисні дії.                                                                                |             |

### Ймовірність експлойту

Середня

## CWE-639: Обхід авторизації через керований користувачем ключ

### Опис

Функція авторизації системи не перешкоджає одному користувачеві отримати доступ до даних або запису іншого користувача
шляхом зміни значення ключа, що ідентифікує дані.

### Розширений опис

Отримання запису користувача відбувається в системі на основі деякого значення ключа, яке знаходиться під контролем
користувача. Ключ зазвичай ідентифікує пов’язаний з користувачем запис, що зберігається в системі, і
використовуватиметься для пошуку цього запису для представлення користувачеві. Цілком ймовірно, що зловмисник повинен
бути автентифікованим користувачем у системі. Однак процес авторизації не буде належним чином перевіряти операцію
доступу до даних, щоб переконатися, що автентифікований користувач, який виконує операцію, має достатні повноваження для
виконання запитуваного доступу до даних, отже обходячи будь-які інші перевірки авторизації, присутні в системі.

Наприклад, зловмисники можуть переглядати місця, де витягуються дані користувача (наприклад, екрани пошуку), і
визначати, чи ключ для шуканого елемента можна контролювати ззовні. Ключ може бути прихованим полем у полі форми HTML,
може передаватися як параметр URL-адреси або як незашифрована змінна cookie, тоді в кожному з цих випадків можна буде
змінити значення ключа.

Одним із проявів цієї слабкості є те, що система використовує послідовні або інакше легко вгадані ідентифікатори сеансу,
які дозволяють одному користувачеві легко переключатися на сеанс іншого користувача та читати/змінювати їхні дані.

### Застосовні платформи

#### Мови

Клас: не залежить від мови (поширеність не визначена)

### Загальні наслідки

| Область застосування | Вплив                                                                                                                                                                                                                                                                                       | Ймовірність |
|----------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------|
| Управління доступом  | **Технічний вплив:** _Обхід захисного механізму_ <br><br> Перевірки контролю доступу для певних даних або функцій користувача можна обійти.                                                                                                                                                 |             |
| Управління доступом  | **Технічний вплив:** _Отримання привілеїв або присвоєння собі ідентифікації_ <br><br> Можливе горизонтальне підвищення привілеїв (один користувач може переглядати/змінювати інформацію іншого користувача).                                                                                |             |
| Управління доступом  | **Технічний вплив:** _Отримання привілеїв або присвоєння собі ідентифікації_ <br><br> Вертикальна ескалація привілеїв можлива, якщо контрольований користувачем ключ насправді є прапорцем, який вказує на статус адміністратора, що дозволяє зловмиснику отримати адміністративний доступ. |             |

### Ймовірність експлойту

Висока

## CWE-285: Неналежний дозвіл

### Опис

Програмне забезпечення не виконує або неправильно виконує перевірку авторизації, коли актор намагається отримати доступ
до ресурсу або виконати дію.

### Розширений опис

Отримання запису користувача відбувається в системі на основі деякого значення ключа, яке знаходиться під контролем
користувача. Ключ зазвичай ідентифікує пов’язаний з користувачем запис, що зберігається в системі, і
використовуватиметься для пошуку цього запису для представлення користувачеві. Цілком ймовірно, що зловмисник повинен
бути автентифікованим користувачем у системі. Однак процес авторизації не буде належним чином перевіряти операцію
доступу до даних, щоб переконатися, що автентифікований користувач, який виконує операцію, має достатні повноваження для
виконання запитуваного доступу до даних, отже обходячи будь-які інші перевірки авторизації, присутні в системі.

Наприклад, зловмисники можуть переглядати місця, де витягуються дані користувача (наприклад, екрани пошуку), і
визначати, чи ключ для шуканого елемента можна контролювати ззовні. Ключ може бути прихованим полем у полі форми HTML,
може передаватися як параметр URL-адреси або як незашифрована змінна cookie, тоді в кожному з цих випадків можна буде
змінити значення ключа.

Одним із проявів цієї слабкості є те, що система використовує послідовні або інакше легко вгадані ідентифікатори сеансу,
які дозволяють одному користувачеві легко переключатися на сеанс іншого користувача та читати/змінювати їхні дані.

### Застосовні платформи

#### Мови

Клас: не залежить від мови (поширеність не визначена)

#### Технології

Веб-сервер (часто поширений)

Сервер бази даних (часто поширений)

### Загальні наслідки

| Область застосування | Вплив                                                                                                                                                                                                                                                                                                      | Ймовірність |
|----------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------|
| Конфіденційність     | **Технічний вплив:** _Читання даних програми; Читання файлів або каталогів_ <br><br> Зловмисник може прочитати конфіденційні дані, прочитавши дані безпосередньо зі сховища даних, яке належним чином не обмежено, або отримавши доступ до недостатньо захищеної привілейованої функції для читання даних. |             |
| Цілісність           | **Технічний вплив:** _Змінення даних програми; Змінення файлів або каталогів_ <br><br> Зловмисник може змінити конфіденційні дані, або записавши дані безпосередньо в сховище даних, яке не має належних обмежень, або отримавши доступ до недостатньо захищеної привілейованої функції для запису даних.  |             |
| Управління доступом  | **Технічний вплив:** _Отримання привілеїв або присвоєння собі ідентифікації_ <br><br> Зловмисник може отримати привілеї шляхом безпосередньої зміни або читання критичних даних або доступу до недостатньо захищених привілейованих функцій.                                                               |             |

### Ймовірність експлойту

Висока
